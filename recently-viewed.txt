script
function getRecentlyViewedProducts() {
    let viewedProducts = [];
    let cookieValue = Cookies.get('recently_viewed_products');
    if (cookieValue) {
      try {
        viewedProducts = JSON.parse(cookieValue)  [];
        if (!Array.isArray(viewedProducts)) {
          viewedProducts = [];
        }
      } catch (error) {
        viewedProducts = [];
      }
    } else {
    }
    let originalLength = viewedProducts.length;
    viewedProducts = viewedProducts
      .map(item = String(item).trim())      
      .filter(item = item.match(^d+$));    
    let uniqueViewedProducts = [...new Set(viewedProducts)];
    return uniqueViewedProducts;
  }

  function addRecentlyViewedProduct(productId) {
    if (!productId  !String(productId).trim().match(^d+$)) {
      console.warn([addRecentlyViewedProduct] Invalid productId (null, empty, or non-numeric). Skipping.);
      return;
    }
    let productIdStr = String(productId).trim();  Convert to string
    let viewedProducts = getRecentlyViewedProducts();
    viewedProducts = viewedProducts.filter(id = id !== productIdStr);

     Insert product ID at the front
    viewedProducts.unshift(productIdStr);
    try {
      Cookies.set('recently_viewed_products', JSON.stringify(viewedProducts), { expires 30, path '' });
    } catch (error) {
      console.error([addRecentlyViewedProduct] Error setting cookie, error);
    }
    
  
   2. GraphQL Fetch Product Data by ID                         
  
  async function fetchProductData(productId) {
    const globalProductId = `gidshopifyProduct${productId}`;
    const graphqlEndpoint = 'httpsenriketa-cara.myshopify.comapi2025-01graphql.json';
    const query = `
      query getProductById($id ID!) {
        product(id $id) {
          id
          title
          handle
          featuredImage {
            url
            altText
          }
        }
      }
    `;
    const variables = { id globalProductId };
    const options = {
      method 'POST',
      headers {
        'Content-Type' 'applicationjson',
        'X-Shopify-Storefront-Access-Token' '9bb33d35df0c4064753a10acf0968a6b'
      },
      body JSON.stringify({ query, variables })
    };

    try {
      const response = await fetch(graphqlEndpoint, options);
      if (!response.ok) {
        throw new Error(`[fetchProductData] GraphQL request failed with status ${response.status}`);
      }
      const jsonData = await response.json();
      if (jsonData.errors) {
        return null;
      }
      const product = jsonData.data.product;
      if (!product) {
        return null;
      }

      return {
        id product.id,
        title product.title,
        handle product.handle,
        featuredImage product.featuredImage  product.featuredImage.url  '',
        altText product.featuredImage  product.featuredImage.altText  product.title
      };

    } catch (error) {
      return null;
    }
  }

async function displayRecentlyViewed() {
  const container = document.getElementById(recently-viewed-products);
  if (!container) return;

  const viewedProducts = getRecentlyViewedProducts();
  if (viewedProducts.length === 0) {
    container.innerHTML = ;
    return;
  }

  Build the initial HTML structure
let productHtml = `
  h2 class=related-products__heading inline-richtext h2
    spanRecently Viewedspan 
    a href=collectionsall class=view-all-linkspan  span View All â†—a
  h2
  ul class=recently-viewed-list
`;

   ðŸ”¹ Fetch all products in parallel instead of sequentially
  const productPromises = viewedProducts.map(fetchProductData);
  const products = await Promise.all(productPromises);

   Loop over fetched products and build HTML
  for (const product of products) {
    if (product) {
      productHtml += `
        li class=recently-viewed-item
          a href=products${product.handle}
            img 
              src=${product.featuredImage} 
              alt=${product.altText  product.title}
            
            p${product.title}p
          a
        li
      `;
    }
  }

  productHtml += ul;
  container.innerHTML = productHtml;
}

  
   4. Automatic Add & Display on DOMContentLoaded               
  
  document.addEventListener(DOMContentLoaded, function () {
    const productIdElement = document.querySelector('[data-product-id]');
    if (productIdElement) {
      let productId = productIdElement.getAttribute('data-product-id');
      addRecentlyViewedProduct(productId);
    } else {
    }
    displayRecentlyViewed();
  });
script
